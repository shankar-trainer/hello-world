jdk1.8  




low level language 
  -- structure oriented language 
     function 
	 variables 
	 
	 
	 
	 
	 java 
	     -- consists of  
		          --> compiler  
				  --> interpretter(jvm)

             makes platform independent

			 jvm    -- java virtual machine 
			 
			c++, python -- oop or structure programming 
       
java -- 
     everything is class 
     inherited syntax from c, c++



    javac -- hello.java --- hello.class 
    java  -- hello ----------  output 

    .class -- having byte code 
          byte code --secret of java 
		  
		  
		  jre -- java runtime environment -- only interpretter
		  jdk -- java development kit --- compiler+interpretter
		  
		  
		  eclipse 
		  
			   
			   java -- 
			     primitive data types 
				   
				   int 
				   
				   float  |   decimal  
				   double |
			   
			       char 
				   
				   boolean 
	
                  +  -- 2 ways 	
		  1. arithmatic addition
		  
		  int z=x+y;  -- arithmatic addition 
		  
		  2. String concatenation
		  	System.out.println("no1 is "+x);
	
	  "no1 is "+x  -- x is concatenated to string 
	  any variable can be concatenated  to string 
		
		
		
		run application
		
		ctrl+ F11 
		
		
    shortcut 
			   main  --- ctrl +space 
		       sysout  	--- ctrl +space   
				
				
				decimal 
				    float 
					double  -- default  
				
			 
			 if  else if  .. else 

			 
			 assignment operator 
			   =
			   
			  comparison operator 
              ==
              !=
              >
			  <
			  >=
			  <=
			  
			  
			   modulus operator 
			   
			   % -- remainde after division 
			   
			   division operator 
			   
			   / -- return quotient 
			   
			   AND operator
			      all the conditions must be true 
				  
			   Or  Operator
			     at least one condition should be true 
				 
				 
				 AND 
				   cond1     cond2       Result 
				    true      true       true 
				    true      false      false 
				    false      true      false 
				    false      false     false 

			   Or  Operator
  				   cond1     cond2       Result 
				    true      true       true 
				    true      false      true 
				    false      true      true 
				    false      false     false
					
					
			   
			   grade 
			      -- 
				      75-100 --distionction 
					  60 -74  first
					  50 -59  second
					  35 -49-- third
			        <=0 
					 fail 
			 
			 
			 
			 variable declaration 
			     -- inside method or main method 
				 -- local variable 
				 -- if using it must be initialised
				 -- if not initialised compiler will give the error 
				 -- local variable has no default values 
				 
				 
				 variable -- entity whose values can vary 
				 
				 constant -- its value cannot be changed 
				 
				 
				 java.lang -- package
				    default package for jdk 
					no need to import 
					by default it is present to every program 
					
					
					User Input 
					  -- Scanner  -- present in java.util 
					  
					      scan the token
					  
					  nextLine()  --- read lien with multiple words 
					  
					  
					  
					
					
					
					Q1. Take distance from user in meter and centimeter 
					     Convert to  feet  inch and kilometer
						 
						
    int data type 						
					
    primitive data    reference data type 
	
   byte  ----------->java.lang.Byte  
   short ----------->java.lang.Short
   int ------------->java.lang.Integer 
   long------------>  java.lang.Long


   every int value is by default int(Integer)
   every decimal value is by default double 
       
	   0 -- 255  -- ascii code
	   
	   
	   
	   increment 
	      a=a+1;
		  a+=1;
		  
		  a=a+2;
		  a+=2;
		  
		  
		  2 types 
		    pre increment
			post increment
			
	   
	   post increment
	     a=a+1;
		 a+=1;
		 a++;
		 
	   
	   
	   Loop   
	   
	     loop is iterative statement which follows conditions

        3 types of loop 
       1. while loop 
           pre tested loop 
           		   
	   
	       counter variable 
		     
			 while(counter){
			   body 
			   
			 }
	   
	   
	   factorial program 
	   5 --  5*4*3*2*1
	          1*2*3*4*5 
			  
			  
Q1 take a number from user and tell if it is prime no

Q2. Display all prime no between 1 -100 using method

Q3. take two  number from user and  display the power of one over other.
            
			3
   2,3  - 2 
   
            5
   4,5  - 4
			 
			  
			  prime no 
			     -- no which is divisble by 1 and itself 
			
   Q.Take a numebr from user. display  sum of the digits of the given no 			
    
	1234
	 %
	 /


 Q.Take a numebr from user. Then display all number in words 

  4523
  
  Four Five two three.
   
  
  while , for loop 
     
	   -- odd loop 
	   -- no counter variable 
	   -- some sentinel/odd variable 
	   
						 
					
				 
				 
	for loop 
      1.top tested loop 
      2.easiest loop 
      3.declaration, condition check, variable decrement/increment at one location 
 	  
	  
	  inner loop
	  
	    inside one loop we can have other loop 
		
		  table of 1 to 5 
		  
		  -----------------------  outer loop print row 
		  ----------------------  inner loop give next line 
		  
		  
		  *
		  *  *
		  *   *   * 
		  *   *   *  *
		  
		  
		  do {
		  
		  }
		  while(condition)

          post tested 
             condition is checked at the last 		  
		  
		  n1=0
		  n2=1;
		  
		  0,1,1,2,3,5
		  
		  
		  palindrome program 
		  
		  121
		  1221
		  125521
		  12321
		  
		  123
		  
		  

  x=125521/10
  x=12552;
  1255
  125
  12
  1


leap year 

   divided by 4 i.e 2012, 2016
   not divided by 100 i.e. 2100,2200
   not divided by 400 i.e 2000,2400    
			 
			 
			 
			 
			 while{
			   break;  --  come out 
			   continue;  contintue current step 
			 }
			 
			 
			 
			 Object -- any entity having state and behaviour 
			         Employee 
					    {
						  id
						  name
						  salary 
						  work(){
						  }
						}
				     --is a real time entity 
                     -- instance of class 

              Class -- group of objects 
                        
                     Employee,
                     Student 
                                   {
								     roll,
									 name
									 subject 
									 study()
									 exam()
									}					 
                     Laptop 
                     Apartment
                     Customer
                     Movie 					 
              
Object -- instance of class 
           each object is having one copy of attribut and behaviour
		   
		   
		   class  Student 
                                   {
								     roll,
									 name
									 subject 
									 study()
									 exam()
									}
									
		Object				student1 
                            roll=10001;
                            name="pavitra"
                            subject="tamil"
                               study()							
                                exam()
		Object				student2 
                            roll=10002;
                            name="shayam"
                            subject="telugu"
                               study()							
                                exam()
							
      attribute -- > variable 
      behaviour --> method 


   private members are acceessible inside the class only 
   outside the class public, default, protected 
   

   java 
     attribute should be private in nature 
     
     each attribute will be used by other class using its public method 
     
     for each attribute will declare getter/setter method 
      

casule --- data

  Encapsulation 
     -- data/state should be private in nature 
	 casule --- data+code  (bind data with code/method)
	    data -- attribute
		code-- method


    Student student1=new Student();
    one reference variable 
	one object 
	
	student1  -- is a reference variable.
    
             it contains reference/address of the object 
				 
				 
		
		constructor 
		     - must have same name as of class 
			 - must not return any value 
			 - it can be private, protected, public and default
			 - default constructor added by compiler if there is  no constructor
			 
			it is of two types 
                 1. default constructor 
                 2. overloaded 				 
		
       
						