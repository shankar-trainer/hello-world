

https://drive.google.com/drive/folders/1M-dnYiUl287n7gVqex_G3wGODyRzctaO?usp=sharing
from Trainers to All Participants:
https://github.com/shankar-trainer/hello-world/tree/cts_dec21

https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2021-09/R/eclipse-java-2021-09-R-win32-x86_64.zip



https://www.oracle.com/in/java/technologies/javase/javase8-archive-downloads.html#license-lightbox
open jdk 


https://builds.openlogic.com/downloadJDK/openlogic-openjdk/8u262-b10/openlogic-openjdk-8u262-b10-windows-x32.zip

-----------------
low level language 
  c, fortran 
  
  function and variables 
 
class and objects 
      high level language
	  c++,java,python 


 2 types of translator 
 
 1. compiler
 2. interpretter
 
 compiler-- scan the whole code -- compile -- .class, .exe
 interpretter -- no output , interpret line by line 
 
  java has both   
 compiler + interpretter 
        platform indepedent 
		
		
		compiler-- .java file-- compile -- .class 
		interpretter -- without recompilation run .class file 


System.out.println("");

+ -- arithmatic operation

    int x=10;
    int y=20;
    int z=x+y;
    
+ -- String concatenation 

System.out.println("no1 is "+x);
    
	"" -- string 
	+  - string concatenation
	+ will append\concatene any variable with string 
	
	
Text 	Editor -- notepad -- edit text 
       notepad to make java file 
	   
	
	IDE -- integrated development environment 
	
	Eclipse 
	
		
		workspace -- location where your java project will be kept 
		             it has location  for source code and classes 
					 
		
	   
	  
	  

class Main {  
  public static void main(String args[]) { 
    System.out.println("hello world");
    
	int x=10;
    int y=20;
    int z=x+y;
    
	System.out.println("no1 is "+x);
    System.out.println("no2 is "+y);
    System.out.println("sum is "+z);
  } 
}


\n -- nextLine 
\t -- tab space 
print -- without next line 
println -- with next line


primitive data types
 
 Integer 
     byte 
	 short 
     int 
	 long
   
 Decimal 
    float 
	double -- default 
	
	class Main {  
  public static void main(String args[]) { 
    double radius=67.566;
    double area=3.14*radius*radius;
    double circumference=2*3.14*radius;

    System.out.println("circle radius is "+radius);
    System.out.println("circle area is "+area);
    System.out.println("circle circumference is "+circumference);
       
    } 
}


operator 
  +
  -
  *  - multiplication
  /  - division 
  %  - remainder 
  
  
  
  jdk -- java development kit 
       -- compiler
	   -- interpretter
	   
	   
jre  -- java runtime environment
     -- interpretter	   
	 
	 eclipse
        -- incremental compilation 
		
		
		
		Integer 
		  
		  byte -----------------> java.lang.Byte 
		  short-----------------> java.lang.Short 
		  int  -----------------> java.lang.Integer
		  long -----------------> java.lang.Integer
		  
		  
		  differrent number 
		  
		  decimal -- 0 - 9
		  
		  binary  --- 0 and 1
		  
		  hexadeciaml -- 0 - 9 and a-f 
		  octal       -- 0 -7 
		  
		  
		  
		  local variable 
		  
		     variable declared inside  method , loop , block , method parameter
             no default value 
             it must be initialised if used			 
		  
		 assignment operator 

         =
          
        increment operator 
		 a=10;
        a=a+1;
		
		
		
		logical ooperator 
		
		 && -- and -- all the conditions are true else false 
		 ||  -- or -- if any conditions is true -->true else false
   AND      		  
 -------------------------------
 cond1    cond2       result
  T         T            T
  T         F            F 
  F         T            F
  F         F            F 
 -------------------------------- 
	OR      		  
 -------------------------------
 cond1    cond2       result
  T         T            T
  T         F            T 
  F         T            T
  F         F            F 
 -------------------------------- 
		
		if 
		
		if else if else 
		
		ternary operator 
		
		
		int marks=34;
		
		if(marks>=35)
			System.out.println("you passed");
		else
			System.out.println("you failed");
		
		(cond1) result , cond2 result 
		
		
		java 8 
		
		--------> open jdk 
		--------->jdk --oracle java 8 

        development-- jdk 
        run   app  -- jre (interpretter)		
		
		
		
		UserInput ---
		    java.lang -- default present in all java files 
		   
		    import java.util.Scanner;
			
		    Scanner sc=new Scanner(System.in);
			
			
		    sc.nextFloat()-- return float
			sc.nextInt()  -- return Integer 
			sc.next()     -- single word  string 
			sc.nextLine()  -- multi word string 
		
		
		
		Question1 
		 Take the employee salary from user.
		 da -- 40% of salary
		 hra -- 20% of salary
		 
		 calculate gross salary and display all values.
		 
		 
		 Loop -- is iterative statement works on certain condition 
		 
		 Three types 
		 1.while loop 
		 2.do while loop 
		 3.for loop 
		 
		 
		 1. while loop 
		    syntax
		     
			 --> top tested loop
		    
			counter variable 
			
			while(condition for counter variable){
				
				body 
				counter increment/decrement
			}
		 2.For loop 
		     --> top tested loop
			 --> easiest loop 
			 --> counter  variable declaration, initialisation, conditio check,
			     increment/decrement at one place 
				 
				 for(counter variable;condition;increment/decrement){
					 
					 body 
				 }
		3.do while loop 
                --> bottom tested loop

               syntax 
                    counter variable 
                     
                    do{
						
						
					}					 
		           while(condition);
				   
				   -> it will execute once wheather condition is true or false 
				   
		
		 nested loop 
		   one loop inside other 
		   
		    * 
			*   *
			*   *    *
			*   *    *    *
			
			
		
		
		Factorial 
		  5-- 5*4*3*2*1
		      1*2*3*4*5 
	
        inifinite loop 
              for(;;)  
               while(true)
		

      156 
	  
      156%10-- 6
      156/10-- 15 
   
      15%10--  5
      15/10--  1	  
	  
	  
	  
	  Structure Programming 
	     -- method and variables 
	  
	  Object Oriented Programming 
	       
		   object  -- real time entity having state and behaviour
                   -- single entity from the class
                   -- instance of the class 
 				   
		   class   -- collection of objects    
		              logical entity
		   Employee 
		      --state is data/attribues
                   id, name, salary 			  
		      -- behaviour -- operation of object 
                     work			  
		   Student 
		          state -- roll, name, subject, marks 
				  behaviour -- study, exam
	  

    class Student {
		  roll
		  name
		  subject 
		  
		  exam()
		  study()
		
	}	  
	  
	  st1-- object 
	  st2-- object 
	     st1 has one copy of attributes/methods 
		 
		 
		 Feature of OOP
		 1.Encapsulation
		 2.Inheritance
		 3.Polymorphism
		 4.Abstraction
		 
		 Encapsulation
		 
		   -- all attributes should be hidden(private) from other classes
		   -- accessible to other class by public methods(setter/getter)
		   -- bind the data (attribues)  with the code(behaviour/method)
		 
		 
		 
		 Constructor
		   1.Default Constructor -- no parameter/arg
		   2.Overloaded Constructor -- parameter
		   
		   
		   
		   
		   Array 
		   
		      -- sorting using array 
			 

     glass1 -- milk 
	 glass2 -- water 
	 glass3 empty 
	 
	 
	 glass3=milk
	 glass1 - empty 
	 glass1=glass2(water)
	 
	 glass2 - empty 
	 
	 glass2=glass3(milk)
	 
	 glass2 - milk 
	 glass1 -water 
	

  static -- common values to be shared
         -- common variable/method  to be shared among  all  the object  
         -- it can be accssed by classname  dot method/variable name
		 -- no object is required.
		 -- static members are implicitly created before the creation of object 
		 
		 
  instance variable -- all objects are having separate copy 
  
			 
	class 	Employee {
			private int id;
			private String name;
			private  float  salary;
			private static String country;
			private static String state;
					
		}	 
			 
			 
	constructor is used for initialisation of instance variable 
    static block is used for initialisation of static members
	
	
	
	
	java.lang.System 
	
	    static  java.io.PrintStream out ;
		
		java.io.PrintStream  -- print()
		                        println()
								
			System.out.println()
			
	static method()
             -- called by class 
             -- inside static method only static variable/methods can be called 
			 -- instance variables can be used by the object 
			 
    instance/non-static  method()
	
	
	
	has relationship 
	
	Child has birthday
	Child has home
	
	Home -- Address  
	Address has Phone 
	Phone -- phonenO 
	
	Employeee has address
	Bank has department 
	
	
	
	
	String 
	     -- any string literal is string object;
		 -- methods will not change in its content 
         -- methods will return  the value 

		 
	
	      
	Product --->Payment-->Order--->Delievery
	
	
	
	
	
             -- static and non static both directly 	
			
		                               Wrapper Class
		 primitive   ---------------- reference data type 
		 int                           Integer 
		 float                         Float 
		 char                          Character 
		 
		 no attribute            
		 no method 
		 
		 
		 Boxing   -- primitive to wrapper class 
		               Integer z=new Integer(100);
		 
		 Unbxoing 
		          wrapper to primitive 
		                       
		           
		     methods 
		     
		     parsseXXX(String) --
		         it is static method 
		         it parses String value and return int, float ,double 
		         
		      Integer 
		           parseInt()
		      Float 
		           parseFloat()        
		          


Constructor 

  -- default constructor
  -- overloded constructor
  
    default constructor
	   -- gives default values to all instance variable to all objects
	   
	   
	   -- each object should have differrent values
	      -- overloded constructor
		  
		  
		  init block 
		  
		  
		  Employee has Car 
		  Employee has Address 
		  Employee has Phone
		  Employee has Department 
		  Employee has Office 
		  
		  
		 class Employee{
			  
			  id
			  name
			  salary 
			  gender (enum) -- user defined type 
			  
			  Address 
			  Car 
			  Phone 
			  Department
			  Office 
			  
		  }
		  
		  
		  
		  class  Address {
			  
		  }
		  
		  class Phone{
			  
			  
		  }
		  
		  1.Encapsulation
		  2.Inheritance
		  
		  one class can inherit the features(methods/variable) in other class 
		  
		  Parent/Base/
		  
		  Child/Derived class 
		  
		  
		  
		  Employee                          Bank
		    |                                /  \
			Manager               Current Bank       Saving Bank  
			  |
			  Asst Manager 
			  
			  
			
		  
		  public, default, protected, static are inherited
		  
		  Constructors are not inherited 
		  
		  
		  super()-- it will call super class constructor
		  super --  it will call super class variable and methods 
		  
		  
		  super -- super class instance 
		  this  -- current class instance 
		  
		  inside static context(method/block) we cannot use super/this
		  
		  
		  
		  public 
		  protected
		  default 
		  private 
		  
		  
		  1.Encapsulation
		  2.Inheritance
		  3.polymorphism
		  
		  polymorphism
		  
		     -- one entity with multiple forms 
			 -- 
			 
			  Water -- gas  solid liquid 
			  
			  implementation 
			   in 2 ways 
			   a.) method overloading 
			   b.) method overriding 
			   
			   
	method overloading
	    -- one method can be represented in multiple forms
        -- method must have differrent number of arguments or data   type 


    
final 

   --  final variable  -- constant 
   -- final method   -- cannot be overridden
   -- final class    -- cannot be inherited
				 
	   final variable 
	   --  local variable -- only modifier can be used is final 
	   --  it must be initialised whether local/static/instance 
	   --  it must be initialised  using inline, constructor, static block 

       final method 
          it cannot be overridden
		  
       final class 
            -- it can  not be inherited
			

     Casting

      primitive data type 
       -> assign lower range data type to higher range
       -> implicit casting 
       -> widening	 
	   
	   
	   1.Encapsulation
	   2.Inheritance
	   3.Polymorphism
	   4.Abstraction
	   
	     Abstraction 
		     -- we can have abstract/required method in the class 
			 -- 
			 Abstraction is implemented in 2 ways 
			  1.Abstract class 
			  2.Interface 
	   
		Abstract class 
            -- class and instance variables
            -- constructor
            -- abstract and non abstract/concrete  method 
			-- cannot be instantiated 
	

       Interface 
            -- 100% abstract class 
            -- only public class final variable(public static final) can be defined 
			-- only abstract methods can be defined 
			-- no  constructor can be defined 
			
			
			-- gives multiple inheritance feature 
			
			-- a class can extend only one class but can implement multiple interface 
			--an interface can extnds multiple interface 
			
			
	
Exception  

  categorize the exception 
   
   ArithmeticException 
   NullPointerException
   
   
   
   
  catch(Exception e){
	  
	  
  }  
         			
	
                             
Player1 --- throw ball -------->player2 ------------>player3 

                                 caught at 
Player1 --- throw ball -------->player2 ------ will not reach to ------>player3 

Player1 --- throw ball -------->player2 ------ will rethrow the ball  ------>player3 
	
				  
				  
	throws -- declare the exception with methods  
	
	throw  -- throw new Exception Object 
	
	
	
	java.util.Date
	    -- date and time both 
		
	Date  date=new Date() 
	
	
	
	Collection Framework 
	
	  Array ---  fixed size 
	        ---  manual sorting, searching
			
			
	  Collection  -- 
	    -->auto growable
		-->implemented lot of alogorithms searching , sorting
        -->		
		
			
		
		
		Collection interface 
		
		 /    \
		Set   List (interfaces)
	
    Map interface 
     -- keys and values 	
		 
	Set interface 
	   no duplicate 
	   no index 
	   not ordered
	
   List  interface
      duplicate 
      index support 
      ordered 


	 List  classes 
        -->ArrayList 
        -->Vector 
        -->LinkedList
  
   generic 
     -- specific data type with collection to avoid run time error 
     -- denoted by 	 <>  diamond operator 
	 --  type safe program
	 
 			
	
	
	
	set 
       	 no duplicate 
	   no index 
	   not ordered
	   
	   
	   
	   Iterator interface --
	      used to traverse elements in list, set
		  
		
  Map -- 
     key, value 
    
     	List -- index is key , value 
   	 
	 
	 HashMap -- not ordered 
	         allows one keys as null
			 allows multiple values to be null
			 
	TreeMap -- sorted by keys 
               does not allow key  to be null	
			   
			   
	java.lang.Comparable 
        sorting in ascending/natural order 

    java.util.Comparator 
 	             sorting in other  order 



JDBC 

    --- database connectivity 
	--- DriverManager --connects the java application with multiple database at a time 
	
	
	java server ---------------> database server 
	 (Network Protocol Driver)--- converts jdbc 
	              
	
	
	zip -- collectio of file 
	jar -- collection of classes
	
	
	
	ResultSet -- contains all records 
	
	          --
			  points to 
			  
			  beforeFirst  -- default position of resultset -- no data
			  1st 
			  2
			  3
			  .
			  last 
			  afterLast
	        
			resultset.next -- move to next 
			
			
			java.sql.Statement 
			         |
				java.sql.PreparedStatement
                         
			-->sub class of statement interface
			-->its faster than statement becoz it's pre compiled
            --> it supports placeholder 
			
			
			common connection in a project 
			
			static connection -- shared by all objects 
			
			
	