jdk1.8  




low level language 
  -- structure oriented language 
     function 
	 variables 
	 
	 
	 
	 
	 java 
	     -- consists of  
		          --> compiler  
				  --> interpretter(jvm)

             makes platform independent

			 jvm    -- java virtual machine 
			 
			c++, python -- oop or structure programming 
       
java -- 
     everything is class 
     inherited syntax from c, c++



    javac -- hello.java --- hello.class 
    java  -- hello ----------  output 

    .class -- having byte code 
          byte code --secret of java 
		  
		  
		  jre -- java runtime environment -- only interpretter
		  jdk -- java development kit --- compiler+interpretter
		  
		  
		  eclipse 
		  
			   
			   java -- 
			     primitive data types 
				   
				   int 
				   
				   float  |   decimal  
				   double |
			   
			       char 
				   
				   boolean 
	
                  +  -- 2 ways 	
		  1. arithmatic addition
		  
		  int z=x+y;  -- arithmatic addition 
		  
		  2. String concatenation
		  	System.out.println("no1 is "+x);
	
	  "no1 is "+x  -- x is concatenated to string 
	  any variable can be concatenated  to string 
		
		
		
		run application
		
		ctrl+ F11 
		
		
    shortcut 
			   main  --- ctrl +space 
		       sysout  	--- ctrl +space   
				
				
				decimal 
				    float 
					double  -- default  
				
			 
			 if  else if  .. else 

			 
			 assignment operator 
			   =
			   
			  comparison operator 
              ==
              !=
              >
			  <
			  >=
			  <=
			  
			  
			   modulus operator 
			   
			   % -- remainde after division 
			   
			   division operator 
			   
			   / -- return quotient 
			   
			   AND operator
			      all the conditions must be true 
				  
			   Or  Operator
			     at least one condition should be true 
				 
				 
				 AND 
				   cond1     cond2       Result 
				    true      true       true 
				    true      false      false 
				    false      true      false 
				    false      false     false 

			   Or  Operator
  				   cond1     cond2       Result 
				    true      true       true 
				    true      false      true 
				    false      true      true 
				    false      false     false
					
					
			   
			   grade 
			      -- 
				      75-100 --distionction 
					  60 -74  first
					  50 -59  second
					  35 -49-- third
			        <=0 
					 fail 
			 
			 
			 
			 variable declaration 
			     -- inside method or main method 
				 -- local variable 
				 -- if using it must be initialised
				 -- if not initialised compiler will give the error 
				 -- local variable has no default values 
				 
				 
				 variable -- entity whose values can vary 
				 
				 constant -- its value cannot be changed 
				 
				 
				 java.lang -- package
				    default package for jdk 
					no need to import 
					by default it is present to every program 
					
					
					User Input 
					  -- Scanner  -- present in java.util 
					  
					      scan the token
					  
					  nextLine()  --- read lien with multiple words 
					  
					  
					  
					
					
					
					Q1. Take distance from user in meter and centimeter 
					     Convert to  feet  inch and kilometer
						 
						
    int data type 						
					
    primitive data    reference data type 
	
   byte  ----------->java.lang.Byte  
   short ----------->java.lang.Short
   int ------------->java.lang.Integer 
   long------------>  java.lang.Long


   every int value is by default int(Integer)
   every decimal value is by default double 
       
	   0 -- 255  -- ascii code
	   
	   
	   
	   increment 
	      a=a+1;
		  a+=1;
		  
		  a=a+2;
		  a+=2;
		  
		  
		  2 types 
		    pre increment
			post increment
			
	   
	   post increment
	     a=a+1;
		 a+=1;
		 a++;
		 
	   
	   
	   Loop   
	   
	     loop is iterative statement which follows conditions

        3 types of loop 
       1. while loop 
           pre tested loop 
           		   
	   
	       counter variable 
		     
			 while(counter){
			   body 
			   
			 }
	   
	   
	   factorial program 
	   5 --  5*4*3*2*1
	          1*2*3*4*5 
			  
			  
Q1 take a number from user and tell if it is prime no

Q2. Display all prime no between 1 -100 using method

Q3. take two  number from user and  display the power of one over other.
            
			3
   2,3  - 2 
   
            5
   4,5  - 4
			 
			  
			  prime no 
			     -- no which is divisble by 1 and itself 
			
   Q.Take a numebr from user. display  sum of the digits of the given no 			
    
	1234
	 %
	 /


 Q.Take a numebr from user. Then display all number in words 

  4523
  
  Four Five two three.
   
  
  while , for loop 
     
	   -- odd loop 
	   -- no counter variable 
	   -- some sentinel/odd variable 
	   
						 
					
				 
				 
	for loop 
      1.top tested loop 
      2.easiest loop 
      3.declaration, condition check, variable decrement/increment at one location 
 	  
	  
	  inner loop
	  
	    inside one loop we can have other loop 
		
		  table of 1 to 5 
		  
		  -----------------------  outer loop print row 
		  ----------------------  inner loop give next line 
		  
		  
		  *
		  *  *
		  *   *   * 
		  *   *   *  *
		  
		  
		  do {
		  
		  }
		  while(condition)

          post tested 
             condition is checked at the last 		  
		  
		  n1=0
		  n2=1;
		  
		  0,1,1,2,3,5
		  
		  
		  palindrome program 
		  
		  121
		  1221
		  125521
		  12321
		  
		  123
		  
		  

  x=125521/10
  x=12552;
  1255
  125
  12
  1


leap year 

   divided by 4 i.e 2012, 2016
   not divided by 100 i.e. 2100,2200
   not divided by 400 i.e 2000,2400    
			 
			 
			 
			 
			 while{
			   break;  --  come out 
			   continue;  contintue current step 
			 }
			 
			 
			 
			 Object -- any entity having state and behaviour 
			         Employee 
					    {
						  id
						  name
						  salary 
						  work(){
						  }
						}
				     --is a real time entity 
                     -- instance of class 

              Class -- group of objects 
                        
                     Employee,
                     Student 
                                   {
								     roll,
									 name
									 subject 
									 study()
									 exam()
									}					 
                     Laptop 
                     Apartment
                     Customer
                     Movie 					 
              
Object -- instance of class 
           each object is having one copy of attribut and behaviour
		   
		   
		   class  Student 
                                   {
								     roll,
									 name
									 subject 
									 study()
									 exam()
									}
									
		Object				student1 
                            roll=10001;
                            name="pavitra"
                            subject="tamil"
                               study()							
                                exam()
		Object				student2 
                            roll=10002;
                            name="shayam"
                            subject="telugu"
                               study()							
                                exam()
							
      attribute -- > variable 
      behaviour --> method 


   private members are acceessible inside the class only 
   outside the class public, default, protected 
   

   java 
     attribute should be private in nature 
     
     each attribute will be used by other class using its public method 
     
     for each attribute will declare getter/setter method 
      

casule --- data

  Encapsulation 
     -- data/state should be private in nature 
	 casule --- data+code  (bind data with code/method)
	    data -- attribute
		code-- method


    Student student1=new Student();
    one reference variable 
	one object 
	
	student1  -- is a reference variable.
    
             it contains reference/address of the object 
				 
				 
		
		constructor 
		     - must have same name as of class 
			 - must not return any value 
			 - it can be private, protected, public and default
			 - default constructor added by compiler if there is  no constructor
			 
			it is of two types 
                 1. default constructor 
                 2. overloaded 				 
		     1. default constructor -- same value for all objects 
			 
			 2. overloaded constructor --
			        it will initialise each object with differrent values
					
	-->class can have one default constructor and multiple overloaded constructor
    --> if a class has no constructor then a default constructor is added 
    --> if a class has overloaded constructor then no  default constructor is added 
	
	

    static --
	
       -- common attributes	
	   --  single copy is shared among all objects 
	   -- all objects are having same copy , no differrent copy os static member 
	   
	   static block 
	       -- initialise static member
	
       static variable 
       static method 
       static block 

       static variable and method can be called by the class name 
       no need of object 
		
	   non static method or instance method
       static method or class method 

      inside instance method can use static and non static both directly 
      inside static method can use static directly, for instance you require object  
   	  
	   	   
		   static member are created before the creation of object 
		   
		   
		   
		   static import 
		       import static members and use it directly without class name
	   
		
		
		
		array 
		  1d array 
		  2d array 
		  
		  
		  stack
			      top -- add , remove 
				  LIFO  -Last In First Out 
			   -------6
			   -------5
			   -------4
			   -------3
			   -------2
			   -------1
			   
		 Queue 
		   
		   1---->2--->3---->4th
		   
		remove at first position
		add at last position
           First In First Out(FIFO) 
						
						
						
		Composition 
		    -> A class composed of ne or more class 
            -> has a relationship
			
		    -> Product has order 
			-> Product has confirmation
			-> Product has delievery
			-> Product has ProductService
		   
		   
     public class Product {

			private int productId;
			private float productCost;
			private int productQuantity;
			
			private Order order;
		  }
		  
		  public class Order {

				private int orderId;
				private String  orderLocation;
				private int  orderNumber;
			}
		
    Sales -- Order 
    Employee -- department 
    
  	one to one relationship  student has address
  	one to many  relationship -- department has multiple employee
	many to many relationship -- multiple courses has multiple students 
	
	
	
	literal 
	    is the values assigned to the variable 
		
		int x=899;
		
		""-- string literal 
		     string literal is the object 
			""
            "abc"
            "hello"   are string objects 
      
	  String is immutable sequence of characters of fixed length 
	   
	   "hello"-- fixed length 
	   immutable  -- it cannot  be modified 

	   
	  			
				
				String s1=null;
				String s2="cognizant";
				
				
				
				String pool   -- 
				             
							 
		String s1="cat";   all will refer the same object in string pool		 
		String s2="cat";		 
		String s3="cat";		 
		String s4="cat";		 
		String s5="cat";		 
		String s6="cat";		 
		
		String s7="dog";  create a new object in string pool 
 
  		String s6=new String("cat");	
		
        create a new object in outside the string pool
    
	  == --> it checks references 
	  .equals -- check the content
	  
	  
	  String -- takes less memory due to immutablity and string pool
	  
	  StringBuffer 
	            -- frequent changes 
				-- mutable 
				-- its not string literal 
	  
				 
				
   int ----------------------> Integer 
   float---------------------->Float 




   Boxing --->  
       primitive ------------->wrapper class 
	   
	   
	   Number 
	    |1.Integer
        |2.Float 
        |3.Double 
        |4.Long  
        |5.Short 


    Number
       parseXXX(String)--static method String to primitive data type 
       
      Integer.parseInt(String) -- String to primitive int	   	   
      Float.parseFloat(String) -- String to primitive float	   
      Double.parseDouble(String)--String to primitive double 	   
      Long.parseLong(String)	   
	  
	  parseXXX   throws NumberFormatException
	  
	  toString() -- convert Wrapper class to String 
	  
	  valueOf() -static method convert primitive,String to Wrapper class 
	  
	  
	  
	  jdk4 -- 
	       boxing  and unboxing 
		   
		   java5 autoboxing 
		   
		   autoboxing= boxing+unboxing 
		   
		   
	  
	   
       		
			OOP 
			 1.Encapsulation
			 2.Inheritance
			 
			   Inheritance 
			       -- inherit feature from parent class to child class
				   -- code reusability 
				   
				   
				   parent/base/super
				   
				   child/derieved/subclass
			   
	              IS A relationship
				    
					Animal 
					   |
					   Dog 
					   Cat
					   Bird 
					   
					   Dog is a animal 
					   
					   super class can have unlimited no of subclasses 
                       

                       except private 
                               public, default, static, protected are inherited
							   
					   
					   
					   Multiple Inheritance
					   
					   Single Inheritance
					   
					   Parent 
					      |
						   Child 
     		
			
	           	    Father    Mother  
					     \     /
						   Child 
     		
	        

     Constructor Inheritance/ Constructor Chaining 
     
       Overloaded Constructor
        1. if no constructor present, a default constructor is added 
        2. if there are overloaded constructor , no default constructor is 
            added 
        3. in default, overloaded constructor a super() is added



     super -- call super class variables, methods
     super() -- call super class default constructor	  
     super(parameter) -- call super class overloaded constructor	  
	
	
	this -- call current class variables, methods
    this() -- call current class constructor	  
    this(parameter) -- call current class overloaded constructor	  
				
				
				
				accessibility 
				    public      |
					protected   |
					default     |
					private     |
					            v
					
					in overriding 
					    -- we cannot reduce the accessibility 
					
				
				Polymorphism 
				
				One entity in multiple forms 
				    
					Water --
					       ice 
						   gas 
						   liquid 
						   
				  Person 
                         -- teacher 
                         -- passenger 
                         -- patient 
                         -- father 
						 
						 2 ways 
						   1. overloading
						   2. overriding 
						   
						 
						 
						 Final 
						   1.variable as constant
						   2.fianl method 
						   3.final class  
						   
						   
				1.   final variable -- constant
						      must be initialised
							    a) inline or 
								b) constructor
								
								in constructor case 
								 it is Eclipse gives blankfinal error 
								
						we cannot create setter for final variable
								
				2. final method
				    it cannot be overriden in subclass
				3. final class 
                    it cannot be inherited
					its method cannot be overriden
					
Package 
    -- directory or folder to keep java files having classes, interfaces
	-- it avoids name confliction, access permission 
	
	
	jar -- collection  of classes 
           java archieve file 
		   
		   
		   System defined package
		      java.lang - 
			  java.sql  
			  java.net 
			  java.awt   
			  
			  
			  
			  
			  if two file are present at the same package 
			  don't need to import 
			  
			  
			  
			                 package
			   java beans -- model 
			    
			    Exception  -- error
				
				           --  main
						   --  sql, database 
				
			  
			  
			  if two files are present in same package no need to import 
			  class, attribute can be default 
			  
			  
			  Outside the package 
                 --> class has to imported 
                 --> default class cannot be imported 
                 --> public class can ne imported in other class in other package 

                 --> after import ,attribute, method  can be used by the object if it is public in nature  				 
			  
			  
			    subclass
			  
			    --> inside same package , public class  can be extended
			    --> inside  same package, public, protected attributes, methods   can be extended
				
				--> outside package  public class  can be extended
			    --> outside package  public, protected attributes and methods   can be extended
				
				
				-- Error 
				    
					Car -- fuel indicator 
					Mobile --battery indicator 
					
					
					
					
					Number
					/    \
				  Float  Integer 
				  
				  
				  in java 
				    data type is checked at 2 times
					  1.compile time 
					  2.run time 
					  
					   it is impossible to use incompatible type
 
				


   throw the ball--------------->catch it -------------->				
   throw the ball--------------->---not caught-----------> break the window glass

     

    disp(){
	   java -- throw Exception 
	    make object of Exception
		 throw it 
	}	 
	
	
	main(){
	  catch the exception
	  if not caught ---------------> jvm -- will give error message 
	}
	
	
	
player1 -->	ball  -->  caught by player2

player1 -->	ball  -->  not caught by player2------> player3 
				
				
	

one try one catch 
one try  multiple catch 
multiple try - multiple catch 


  throw 
       --- make new Exception instance anf then throw it 
  throws
         -- declare and handle the exception in the method 



   player1 ---- ball ---- caught by  player3----  ---->player2		 
 

 player1 ---- ball ---- caught by  player3----rethrow  ---->player2		 
    


var arguments 
     -- variable number of arguments 
     -- array, multiple arguments
     -- denoted by three dots 
    
     -- in method it must be the last argument
     --	in a single method there can be only one var argument

	 
			   
			   abstract cass
				
    ->can have normal method and abstract method
    ->abstract method don't have body 
    ->abstract method can be declared inside abstract class  and interfaces
    ->abstract class cannot be instanciated 
	->can have constructor
	->it can have instance, static variable 
	
	
	  interface
	  
	    --> multiple inheritance 
		--> one class can extends one class but can implement multiple interfaces
		--> one interface can extends multiple interfaces
		--> all variables are by default public static and final 
		--> all methods are by default public and abstract 
		
		--> is 100% abstract class 
		
		--> no constructor
		
		
		
		abstract class 
		
		      instance and class variable 
	          constructor allowed 
	          abstract and non abstract methods 
	   
         interface 	   
			    only class variable(public static final)
				no constructor is allowed
				only abstract method is allow
		
		Mother  Father
		\     /
		child
	
		
		
		array 
		--> fixed data type
        --> size is fixed 

        int ar[]=new ar[10];
		
     
     Collection 
           -- auto growable 
           -- algoritham is implemented 
		   
		  
	  Collection(interface) 
	    |
		 List(interface) 
		   | 
		   Vector 
		   ArrayList
		   LinkedList
	  
		
		
		
		
		DAO -- Data Access Object 
		
		      --separatae layer/class 
			  -- all database operation
			  
		
		    List 
			     --subclasses 
				    Vector 
					ArrayList 
					LinkedList 
					
				
			    allows duplicate
				ordered
				index support 
		
		
	       Set 
		        HashSet
		        LinkedHashSet
				TreeSet 
				
				no duplicate
				ordered 
				no index support 
				
			Map 
                   key, value 	
                  
                    Entity  -- key , value 
					
					no duplicate key 
					
              put(key,value)
			  get(key)
			  
			  keySet() -- all keys in the set form 
			  values()-- all values Collection 
			  
			  
			  EntrySet -- single entry in the map having key, value
			  
			  
			  Collection -- interface 
			  
			  Collections-- utility class 
			  
			  
			  All classes like Integer String Float havae implemented sorting 
			  
			  Arrays.sort(elements)
			  Collctions.sort(elements)
			  
			  
			  Arrays.sort(ar) -- ar is array of integer
			  Collctions.sort(list) -- list is list of integer
                    Integer-- comparable 			  
			  
			  Arrays.sort(empList) list of employee
			    Error   Employee has not implemented Comparabale 
				
				
		
      class myclass1 extends Thread 
      class myclass1 extends Applet   implemens Runnable 
  
     kid1 --- got pen  -- wants to book
     kid2 -- got book  -- wants the book 
 	 


	  
				
			  
			  



Database 
      data in ledger                   					
	
    database software 
                    --------------------------
                 
                                      user1
     database server ---------------- user2
                                      user3 
                                      user4
									  
  	
	
	  database 
	           tables 
			       data 
				   
	  DBMS -- database management system 
            
      RDBMS  relational  database management system 			
                    
					 department --- employee 
					 student  -- examination
                      product -- order -- delievry table 


      RDBMS software 
                 Oracle  -- oracle 
                 DB2     -- ibm 
                 SQL server -- ms 	
               free/open source
              MYSQL 
              PostGreSQL



     Oracle Server -----  tool  -- 1.sql plus -- runs in command prompt 
	                               2.sql developer (gui)

      	
		API -- Application Program Interface 
		           -- methods
				   -- constructor
				   -- interface
				   
				  jdbc api 
				  awt api 
				  
		JDBC API 



    java app1-  connect -- oracle 
                           mysql 
                           sql server 

   1.Driver -- load the driver
   
   2.DriverManager  -- connectivity --using  driver name, url, username, password    						   
				  
   
    Driver --- jdbc sql -- translate-- network/database protocol ---- communicate with database 


java app -- DriverManager -- database server 
 
 
          (lot of database driver)
			
html--> java web server          --->   database server  
           middleware server
                type3/network protocol driver 		   

ojdbc8.jar 

.jar -- - java archieve  -collection of classes, interfaces

    
	
				  ResultSet -- it contains all records 
				  
	ResultSet has pointer for traversing records 
	
	 BeforeFirst -- default position- here there is no record 
     FirstRecord  -- it has data  -- next() method will move to first record
     2
     3
     .
     .
     n
     last record	 
	 AfterLast			  
			    
				
				
	DAO --- data access object 
           CRUD 
                   C- create -- sql insert
                   R -retrieve -- sql select 
                   U - update  -- sql update				   
				   D - delete  -- sql delete 
				
				Statement 
				ResultSet 
				DriverManager
				
				  -- execute sql statement
				  Interface 
				Statement 
				 |PreparedStatement
				 |CallableStatement
				 
				 
			executeQuery --  select 
            executeUpdate -- dml(insert update delete)
			
			execute -- all sql statement , ddl dml select 
			         return true -- select statement 
					 return false -- dml(inseet update delete) and if no result 
					 
			
			
								
								
								
								