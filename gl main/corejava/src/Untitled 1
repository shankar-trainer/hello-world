[a-z]
[A-Z]
[0-9]
? --> 0 or 1
* --> 0 or 1 or more
+ --> 1 or more

quantifier 
{3}

{1,10}


"dd-Mon-yyyy hh:mm:ss"

  simpledateformat
--> customise format 

====================
Collection
     |
     
   List Interface 
      1.ArrayList
      2.Vector 
      3.LinkedList

Queue  interface 

    1.PriorityQueue
    2.LinkedList


Collections

Arrays
     --> to work with arrays
     --> sort, equals, binarySearch,toString

Collections
     --> List
     --> sort, binarySearch, max, shuffle,
     --> frequency


Password Regular Expression Pattern

((?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%]).{6,20})


(			# Start of group
  (?=.*\d)		#   must contains one digit from 0-9
  (?=.*[a-z])		#   must contains one lowercase characters
  (?=.*[A-Z])		#   must contains one uppercase characters
  (?=.*[@#$%])		#   must contains one special symbols in the list "@#$%"
              .		#     match anything with previous condition checking
                {6,20}	#        length at least 6 characters and maximum of 20	
)	


These are all lookahead assertions (positive and negative) that are making sure the following text respects some rules without actually capturing the text.

               # assert that
(?=^.{8,}$)    # there are at least 8 characters
(              # and
  (?=.*\d)       # there is at least a digit
  |              # or
  (?=.*\W+)      # there is one or more "non word" characters (\W is equivalent to [^a-zA-Z0-9_])
)              # and
(?![.\n])      # there is no . or newline and
(?=.*[A-Z])    # there is at least an upper case letter and
(?=.*[a-z]).*$ # there is at least a lower case letter
.*$            # in a string of any characters
(?! ... ) is the syntax for a negative lookahead (match if there is no ...), (?= ... ) is for a positive lookahead (match if there is ...). This looks a lot like password validation!          
      

Obtain a time string as input in the following 
format  'hh:mm am' or 'hh:mm pm'. Write code to 
validate it using the following rules:
 
- It should be a valid time in 12 hrs format
- It should have case insensitive AM or PM

















1.Load Driver 
2.getConnection
3.Execute SQl Statement
4.Get Records


ResultSet 
       Cusror Default Position
       
      BeforeFirst -- default position 
      First
      2
      3
      4
      last
      afterlast 
       
   next()
   previous()
   

      BeforeFirst -- default position 

    reverse order
    
    put cusror to last position using last() method
    
    avg, 
    sum, 
    
    
    
    
    
    CRUD 
    
    C -- Create
    R -- Retrieve
    U -- Update
    D -- Delete
    
    
    Student (roll, name, marks, dob) -- model 
    
    StudentOperation --DAO
        crud 
    
    StudcentMain
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    cartesian product 
    
    A={a,b}
    B={c,d}
    A X B={ac, ad, bc, bd}
       
    
    Primary Key -- on single column
    
   Composite Key--  Primary Key -- 
   on multiple column
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
              



    










  
