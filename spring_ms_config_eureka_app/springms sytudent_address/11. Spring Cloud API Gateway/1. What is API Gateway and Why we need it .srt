1
00:00:00,650 --> 00:00:09,190
Hello and welcome back for the upcoming lectures, we are going to focus on the spring cloud EPA Gateway.

2
00:00:09,770 --> 00:00:16,760
So before we jump to the implementation, let's first understand what is EPA gateway and why we need

3
00:00:16,760 --> 00:00:17,000
it.

4
00:00:18,690 --> 00:00:21,190
Now, here we have two micro services.

5
00:00:21,210 --> 00:00:24,670
One is student service and another one is a service.

6
00:00:24,990 --> 00:00:30,990
Now, consumer will hit these micro services by having the wall of these micro services.

7
00:00:32,670 --> 00:00:38,580
Now say we want to implement authentication in our micro services, so what we need to do is that we

8
00:00:38,580 --> 00:00:42,650
need to implement separately in each of our micro services.

9
00:00:42,900 --> 00:00:45,390
So that's the repetition of the code.

10
00:00:45,600 --> 00:00:51,930
And if we have a slight change and we have thousands of micro services, then we need to changing all

11
00:00:51,930 --> 00:00:53,030
the micro services.

12
00:00:53,220 --> 00:00:54,930
So that's a big task.

13
00:00:55,650 --> 00:01:01,380
Another thing is that we want to log the request and response for all the micro services.

14
00:01:01,620 --> 00:01:04,260
So these are the crosscutting concerns.

15
00:01:04,560 --> 00:01:10,410
So if we want to achieve this in the centralized place, then here comes the API gateway.

16
00:01:11,600 --> 00:01:17,600
So here it is, the middle man, and this is basically a separate springboard application.

17
00:01:17,750 --> 00:01:22,400
And so, for example, it's running on the Port nine zero nine zero in local Muzzin.

18
00:01:23,840 --> 00:01:29,860
So now what will happen, whatever requests are coming from our consumer, will first come to Gateway.

19
00:01:30,140 --> 00:01:37,130
Now EPA Gate will withdraw that particular request to the appropriate Microsoft B student service or

20
00:01:37,160 --> 00:01:38,030
address service.

21
00:01:38,300 --> 00:01:43,940
It is the responsibility of EPA Gateway to Rouda request to particular Microsoft Office.

22
00:01:45,240 --> 00:01:50,840
So now here what will happen, we will not set over Microsoft with you orders to the consumer, instead

23
00:01:50,850 --> 00:01:54,330
of that, we will give them the you are a low power gateway.

24
00:01:54,720 --> 00:01:55,650
So what will happen?

25
00:01:55,830 --> 00:01:57,420
Consumer will hit this.

26
00:01:57,420 --> 00:01:57,850
You are.

27
00:01:58,020 --> 00:01:59,360
That is the gateway.

28
00:01:59,670 --> 00:02:03,210
And let's take one example how the routing happens.

29
00:02:03,540 --> 00:02:09,840
So, for example, consumer wants to hit the student service so it will hit the You are Telopea Gateway

30
00:02:09,840 --> 00:02:18,810
localhost nine zero nine zero service name Synagis student service as opposed to done less get by ID.

31
00:02:20,110 --> 00:02:25,770
So this is the are that consumer will hate, and in the end, it will provide the name of the service

32
00:02:26,020 --> 00:02:32,890
now EPA, yet we will allow that request to our student service and student service will give the response

33
00:02:32,890 --> 00:02:38,710
back to EPA and EPA, yet we will give that response back to the consumer.

34
00:02:38,920 --> 00:02:45,460
So this is the complete flaw for our request and response when we have EPA gateway in the picture.

35
00:02:46,300 --> 00:02:51,780
Now, the question is how the EPA gateway will allow the request to the appropriate micro service.

36
00:02:52,180 --> 00:02:54,190
And the answer is sprinklered.

37
00:02:54,190 --> 00:02:54,880
Eureka.

38
00:02:55,480 --> 00:02:56,410
Because we know.

39
00:02:56,410 --> 00:02:56,680
Right.

40
00:02:56,800 --> 00:03:00,760
Utica is having all the details for our all the micro services.

41
00:03:00,910 --> 00:03:06,920
It's having all the instanced it is for each of our Microsoft is along with the others.

42
00:03:07,210 --> 00:03:08,290
So what will happen?

43
00:03:08,560 --> 00:03:09,300
Sprinklered.

44
00:03:09,310 --> 00:03:15,910
EPA Gateway will work with the Utica to put out the request to appropriate microcircuits, which request

45
00:03:16,120 --> 00:03:18,100
which are coming from the consumer.

46
00:03:19,000 --> 00:03:21,790
Now, let's talk about the crosscutting concerns.

47
00:03:22,030 --> 00:03:24,950
So, for example, consumer eating over microcircuits.

48
00:03:24,950 --> 00:03:26,320
So what will happen first?

49
00:03:26,330 --> 00:03:28,350
The request will come to EPA Gateway.

50
00:03:28,660 --> 00:03:31,330
So here we can implement the authentication.

51
00:03:31,600 --> 00:03:37,600
If Authentications is successful, then API Gateway will allow that request to appropriate microcircuits.

52
00:03:37,840 --> 00:03:43,510
Otherwise API Gateway will give the response back to the consumer that is basically in error.

53
00:03:44,320 --> 00:03:50,680
Another thing you want to have is that you want to add the header to your request before the EPA get

54
00:03:50,720 --> 00:03:53,440
without the request to particular Microsoft Office.

55
00:03:53,830 --> 00:03:57,200
So this is you can do with the help of three filter.

56
00:03:57,820 --> 00:04:02,010
So now our Microsoft Office will give the response back to API Gateway.

57
00:04:02,350 --> 00:04:09,310
And here we want to add some response header before the API gateway gives the response back to consumer.

58
00:04:09,580 --> 00:04:12,580
Or we want to log the response, whatever you want to.

59
00:04:12,580 --> 00:04:13,390
How so?

60
00:04:13,390 --> 00:04:17,740
This you can do with the help of post filter so prefilled.

61
00:04:17,770 --> 00:04:23,500
That means before the API gateway around the request to appropriate Microsoft Office and post filter

62
00:04:23,500 --> 00:04:28,010
means before the API gateway gives the response back to the consumer.

63
00:04:28,690 --> 00:04:34,810
So with the help of pre and post filters, you can have crosscutting concerns in the EPA gateway.

64
00:04:36,110 --> 00:04:42,650
So you don't need to implement logging or say, for example, authentication in each of the micro services

65
00:04:42,890 --> 00:04:47,930
in one place, you will put and it will be applicable for all your micro services.

66
00:04:48,170 --> 00:04:51,650
So, for example, in the future, you are adding new micro service.

67
00:04:51,920 --> 00:04:57,870
So you don't need to worry about the authentication because you have authentication in the API gateway.

68
00:04:58,190 --> 00:05:00,080
So this will take care.

69
00:05:00,230 --> 00:05:03,470
The authentication for newly added micro service as well.

70
00:05:04,620 --> 00:05:10,610
Now, let's talk about load balancing, so here I get we will do the load balancing as well.

71
00:05:10,990 --> 00:05:17,130
So, for example, we have to instant's for our student service said, for example, consumer resiting

72
00:05:17,130 --> 00:05:19,620
student service using the You are Telopea Gateway.

73
00:05:19,890 --> 00:05:25,620
Now, it will divide the load across all the instances for student service.

74
00:05:25,830 --> 00:05:29,610
And this is applicable for all of our micro services.

75
00:05:30,590 --> 00:05:37,160
So here it period, we will do the load balancing across all the instances we have for that particular

76
00:05:37,160 --> 00:05:38,150
micro service.

77
00:05:39,160 --> 00:05:45,430
So this is an overview of a period and in the upcoming lectures, we will see the implementation of

78
00:05:45,430 --> 00:05:47,270
Spring Cloud API Gateway.

79
00:05:47,980 --> 00:05:52,090
So that's all for now, will proceed further in the next lecture.

80
00:05:52,660 --> 00:05:53,620
Thank you very much.
