1
00:00:00,530 --> 00:00:05,180
Hello and welcome back for the upcoming lectures.

2
00:00:05,390 --> 00:00:12,890
We will focus on the sprinklered conflicts are now before we jump to implementation, let's first understand

3
00:00:13,100 --> 00:00:15,860
what these conflicts are about and why we need it.

4
00:00:17,270 --> 00:00:24,230
Now, another example of how to micro services, student and address and for each micro service, the

5
00:00:24,530 --> 00:00:31,640
application properties file and inside that we have a bunch of properties like database properties,

6
00:00:31,880 --> 00:00:36,440
Judicature, where you are, Zipkin server you all and many more properties write.

7
00:00:37,670 --> 00:00:44,660
Now we have different environments like do give and plot, and obviously for each environment, these

8
00:00:44,660 --> 00:00:51,470
properties will have different values, like we have a database for they'll be how you database and

9
00:00:51,680 --> 00:00:52,130
database.

10
00:00:52,150 --> 00:00:52,370
Right.

11
00:00:52,640 --> 00:00:56,440
So obviously they will be having different credentials, username and password.

12
00:00:56,720 --> 00:00:59,860
So this will be applicable for other properties as well.

13
00:01:00,800 --> 00:01:06,860
So how do you manage this environment specific properties for micro services, so that's the solution.

14
00:01:07,400 --> 00:01:12,660
And another thing is that what if we had a change in value for that particular property?

15
00:01:13,100 --> 00:01:17,330
So, for example, we are changing the password database now.

16
00:01:17,750 --> 00:01:23,030
We know that our application, the properties file is inside of packaging meet jar or what?

17
00:01:23,570 --> 00:01:25,720
So you need to redeploy the application.

18
00:01:26,330 --> 00:01:29,320
You just have a change in your application or properties file.

19
00:01:29,540 --> 00:01:31,550
You don't have change in your code.

20
00:01:31,820 --> 00:01:34,580
But still you need to deploy the Microsoft Office.

21
00:01:35,840 --> 00:01:39,320
So the question is how to handle these kind of scenarios.

22
00:01:39,950 --> 00:01:46,700
So what we can do is we can store the environment specific properties in Gaete or Esswein and then we

23
00:01:46,700 --> 00:01:47,390
use git.

24
00:01:47,750 --> 00:01:49,390
It can be Gottleib or get up.

25
00:01:49,640 --> 00:01:52,550
And in this course as well, we are going to use git.

26
00:01:53,300 --> 00:01:57,650
So we will put the properties for our micro services in get now.

27
00:01:57,860 --> 00:02:03,970
We cannot directly refer to it from our micro services because in future, if we are changing the target,

28
00:02:03,980 --> 00:02:06,380
you are right, then it will be a problem for us.

29
00:02:06,620 --> 00:02:10,500
Then we need to change in our micro services and that's a big task.

30
00:02:11,300 --> 00:02:13,270
So here comes config server.

31
00:02:13,610 --> 00:02:17,260
So basically config server is a separate Springwood application.

32
00:02:17,630 --> 00:02:23,690
So what it will do, it will read the properties from the git and from conflicts over our micro services,

33
00:02:23,690 --> 00:02:25,130
will read the properties.

34
00:02:25,880 --> 00:02:29,570
So this is the complete flaw, our properties with storing the git.

35
00:02:29,810 --> 00:02:36,200
From there it will read by config server and then micro services will read from the config server.

36
00:02:36,950 --> 00:02:43,250
So here our config server will register itself with the Eureka server and our micro services can refer

37
00:02:43,250 --> 00:02:47,210
to convict server by service name or you can say service idee.

38
00:02:48,020 --> 00:02:50,000
So in future it can fix server.

39
00:02:50,000 --> 00:02:53,170
You are at least getting ginola then we don't need to worry about it.

40
00:02:53,180 --> 00:02:53,500
Why?

41
00:02:53,750 --> 00:02:59,840
Because we have unica server and other micro services are using the service name of our config server.

42
00:03:00,990 --> 00:03:07,650
Now we have different environments like Dellacqua and brought in context of conflicts are what we call

43
00:03:07,650 --> 00:03:12,450
it as profile, like they profile your profile and broad profile.

44
00:03:13,440 --> 00:03:19,050
So this is what we are going to do, we will store the environment specific properties in it and from

45
00:03:19,170 --> 00:03:24,520
it it will be read by config server and our micro services will read from the config server.

46
00:03:25,230 --> 00:03:30,750
So this is not config server and that's what we are going to implement in the upcoming lecture's.

47
00:03:32,560 --> 00:03:38,090
So using the config server, we can centralize our properties at one place in Guiteau lesbian, right?

48
00:03:38,440 --> 00:03:40,800
We are starting the properties in getable.

49
00:03:41,020 --> 00:03:44,170
So in puter, if you have a chain, you just need to change.

50
00:03:44,170 --> 00:03:45,070
Inderjit report.

51
00:03:45,160 --> 00:03:45,700
That's it.

52
00:03:46,330 --> 00:03:52,000
So this is the use of conflict server and that's what we are going to implement in the upcoming lecture's.

53
00:03:52,900 --> 00:03:54,360
So that's all for now.

54
00:03:54,740 --> 00:03:56,950
Will proceed further in the next lecture.

55
00:03:57,490 --> 00:03:58,390
Thank you very much.
