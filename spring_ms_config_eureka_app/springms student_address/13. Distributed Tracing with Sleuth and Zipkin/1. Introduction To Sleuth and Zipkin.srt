1
00:00:00,360 --> 00:00:08,030
Hello and welcome back for the upcoming lectures, we are going to focus on the distributor dressing

2
00:00:08,040 --> 00:00:16,050
with Sloup and Zipkin, but before that, let's first understand what is distributor dressing and why

3
00:00:16,050 --> 00:00:16,620
we needed.

4
00:00:17,810 --> 00:00:23,150
So in our example, we know that consumate is hitting the student service and obviously it is using

5
00:00:23,150 --> 00:00:28,250
the epigastric and from student service, we have a call to address microcircuits.

6
00:00:28,640 --> 00:00:35,450
So here we just have one internal call between our micro services for one particular request coming

7
00:00:35,450 --> 00:00:36,720
from the consumer.

8
00:00:37,220 --> 00:00:39,260
But when you are working in the products and.

9
00:00:39,260 --> 00:00:39,530
Right.

10
00:00:39,680 --> 00:00:46,940
You might be having 10, 20 or 30 internal calls between your micro services for just one request coming

11
00:00:46,940 --> 00:00:48,190
from the consumer.

12
00:00:49,130 --> 00:00:53,220
Now, say, for example, your consumer is complaining that something is failing.

13
00:00:53,900 --> 00:01:00,320
So how you will take that where something is wrong in your micro services, B, student service, address,

14
00:01:00,320 --> 00:01:07,990
service or any other micro service because you have 10 to 20 internal calls between your micro services.

15
00:01:08,300 --> 00:01:11,300
So how you will proceed, that is the issue.

16
00:01:12,470 --> 00:01:18,710
Now, here, each of these micro surveys is having that logs, that's fine, but how you will identify

17
00:01:18,710 --> 00:01:25,400
that these are the logs for this particular request, how you will track the distributed logs in this

18
00:01:25,400 --> 00:01:26,440
micro services.

19
00:01:26,840 --> 00:01:30,320
So here comes the slewed for distributed processing.

20
00:01:30,890 --> 00:01:38,540
So what it will do is that in the logs, whatever we have, get logger dot info, debug Orara, it will

21
00:01:38,540 --> 00:01:40,160
put the service name first.

22
00:01:40,460 --> 00:01:41,950
This is the format it will follow.

23
00:01:42,320 --> 00:01:47,530
And these three parameters we need to understand while working with the Slewed and Zipkin.

24
00:01:48,290 --> 00:01:54,440
So the first it will put in the log statement is service name so that it will pick from the application

25
00:01:54,650 --> 00:01:56,510
properties file whatever is provided.

26
00:01:56,780 --> 00:01:58,100
The property we set right.

27
00:01:58,280 --> 00:02:03,840
Spring dot application dot name the API gateways to the service or address service.

28
00:02:04,220 --> 00:02:09,020
So this is the name of the service we provided in the application DOT properties file.

29
00:02:09,980 --> 00:02:11,840
Now the next is Braeside.

30
00:02:12,110 --> 00:02:18,510
So this site is unique for a request across all your services, including API gate.

31
00:02:18,620 --> 00:02:20,420
We know this presider.

32
00:02:20,420 --> 00:02:21,770
You don't need to worry about it.

33
00:02:21,770 --> 00:02:25,730
Okay, so it will automatically generate it and it will be unique.

34
00:02:26,060 --> 00:02:31,850
But for example, here we are taking the value of trace ideas, one for the one request coming from

35
00:02:31,850 --> 00:02:32,820
the consumer.

36
00:02:33,110 --> 00:02:36,640
Now -- the IP address will take that in the header.

37
00:02:36,800 --> 00:02:39,410
Is there any value present for the residing?

38
00:02:39,740 --> 00:02:45,830
If no, then it will generate the unique value and it will put in this particular request header.

39
00:02:46,280 --> 00:02:51,620
So obviously when we call from the consumer side, there will be not residing in the request header.

40
00:02:51,800 --> 00:02:58,430
This is for just example, am setting, but the first in the API gateways will generate unique to idea

41
00:02:58,670 --> 00:03:03,210
and it will put in the refrigerator and it will pass that request to student service.

42
00:03:03,530 --> 00:03:06,890
Now again, -- the student service will take that.

43
00:03:06,890 --> 00:03:08,920
Is there reside in the requester?

44
00:03:09,320 --> 00:03:10,400
Yes, that is right.

45
00:03:10,670 --> 00:03:13,850
Even if the value this is just for example, I am taking.

46
00:03:13,860 --> 00:03:18,230
OK, so it will handle and this is unique and it will not look like this.

47
00:03:18,560 --> 00:03:19,730
This for the purpose.

48
00:03:19,730 --> 00:03:27,650
I am taking the residual duty one now student service is getting the idea in requested so it will pass

49
00:03:27,650 --> 00:03:34,990
the same to address service while calling it so IT service will also get that reside in the requester.

50
00:03:35,000 --> 00:03:41,630
So slewed inside the address service will identify this tracery and it will carry on on either micro

51
00:03:41,630 --> 00:03:42,730
services as well.

52
00:03:43,610 --> 00:03:50,870
So for one particular request coming from the consumer place, it will remain same across all your micro

53
00:03:50,870 --> 00:03:53,470
services, including the API Gateway.

54
00:03:53,810 --> 00:03:59,840
Actually in the API Gateway Slewed will generate electricity and it will put in the requisite header

55
00:04:00,020 --> 00:04:07,010
and then it will pass to other micro services because at the request we are not passing any trace in

56
00:04:07,010 --> 00:04:07,760
the requested it.

57
00:04:07,820 --> 00:04:10,070
OK, now spon.

58
00:04:10,070 --> 00:04:13,940
It is unique for a request within the same MICROS service.

59
00:04:14,720 --> 00:04:18,120
So here you see the sponsored CO two S1 for example.

60
00:04:18,140 --> 00:04:23,540
OK, again, it will be handled by Sloup and it will be unique for a particular micro service.

61
00:04:23,960 --> 00:04:30,440
So here we are just talking about the one request coming from the consumer, but it is applicable to

62
00:04:30,440 --> 00:04:32,990
all the requests coming from the consumer.

63
00:04:33,320 --> 00:04:39,770
It's just that I'm taking one single request as an example that is coming from the consumer.

64
00:04:41,060 --> 00:04:47,750
So here in the gateway, gateway slipped under the spotlight, so it will be unique in this particular

65
00:04:47,750 --> 00:04:51,830
Microsoft Office only it will not carry forward to other services.

66
00:04:52,040 --> 00:04:58,640
Again, split in the service will create a unique opportunity for this particular request in this to

67
00:04:58,640 --> 00:04:59,320
run service.

68
00:04:59,580 --> 00:05:02,510
Same for address services, for example, is the value.

69
00:05:03,020 --> 00:05:10,280
So this is the same across all your micro services, along with the Gateway Spaniard's theme within

70
00:05:10,280 --> 00:05:14,420
the SeaMicro service set, for example, in the student service.

71
00:05:14,630 --> 00:05:21,260
For this particular request, we are calling for different methods and and each of this matter is having

72
00:05:21,260 --> 00:05:22,460
some log statements.

73
00:05:22,730 --> 00:05:25,770
It can be longboarding for debug or whatever.

74
00:05:26,090 --> 00:05:32,590
Now, how you will identify that this logs are for same request only that came from the consumer.

75
00:05:32,930 --> 00:05:35,760
That is basically one single request from the consumer.

76
00:05:36,260 --> 00:05:43,300
So you will take the sponte if all log statements are having the same sponte, that means this all logs

77
00:05:43,310 --> 00:05:47,100
belongs to one particular request that is coming from the consumer.

78
00:05:47,360 --> 00:05:49,670
And this is within the student service.

79
00:05:50,120 --> 00:05:54,980
If you want to press the request across all the micro services, you will use electricity.

80
00:05:55,400 --> 00:06:00,500
But if you want to press down the request within the service, then you will use sponte.

81
00:06:00,980 --> 00:06:03,990
So service Ning PrÃ©sidente sponsored.

82
00:06:04,340 --> 00:06:07,730
So all these three things will be handled by slewed.

83
00:06:08,060 --> 00:06:09,720
We don't need to worry about it, ok.

84
00:06:09,920 --> 00:06:16,550
Regarding the uniqueness and all presidents sponsored will be generated by slewed and that will be unique.

85
00:06:16,970 --> 00:06:24,020
But you need to understand when to use it and when to use cyanide to trace down the request.

86
00:06:25,120 --> 00:06:31,750
Now, these things we can see in the logs, that's fine, but what if we want to check all these things

87
00:06:31,750 --> 00:06:32,910
in the GraphicLy?

88
00:06:33,310 --> 00:06:38,650
That means a dashboard we want to have or you can say we want to have UI user interface.

89
00:06:38,920 --> 00:06:40,710
So that comes the zipkin.

90
00:06:41,140 --> 00:06:46,330
So Zipkin is providing one server where we can take all these things in graphical.

91
00:06:46,350 --> 00:06:54,070
We basically it is providing a UI tool so that we can take all these things to complete plew that this

92
00:06:54,070 --> 00:06:59,830
request is going to run service and from there it's going to enter address service and where it is feeling

93
00:07:00,640 --> 00:07:03,110
so smooth and Zipkin will work together.

94
00:07:03,400 --> 00:07:06,190
So this logs, whatever slewed is generating right.

95
00:07:06,400 --> 00:07:09,150
It will pass these logs to Dippin Server.

96
00:07:09,910 --> 00:07:13,480
So all these logs that sleuthed is managing right to service them.

97
00:07:13,480 --> 00:07:20,650
Trace evidence Monetti that it will pass to Zipkin server and using Zipkin UI we can check all these

98
00:07:20,650 --> 00:07:22,030
things in UI.

99
00:07:22,030 --> 00:07:24,730
Basically in the dashboard we can see that.

100
00:07:24,730 --> 00:07:28,810
OK, consumate is it in the student service and that is going by IP.

101
00:07:28,810 --> 00:07:31,840
I get to and from there it is going to address service.

102
00:07:32,380 --> 00:07:38,540
So distributed trussing we can add to using the Sloup and then we can see in the graphical way easy

103
00:07:38,800 --> 00:07:39,400
zipkin.

104
00:07:40,700 --> 00:07:46,130
So this is the distributor trussing, and that's what we are going to achieve in the upcoming lectors

105
00:07:46,280 --> 00:07:50,700
using Slewed and Zipkin, so that's all for now.

106
00:07:51,050 --> 00:07:52,520
We'll see you in the next lecture.

107
00:07:52,940 --> 00:07:53,840
Thank you very much.
