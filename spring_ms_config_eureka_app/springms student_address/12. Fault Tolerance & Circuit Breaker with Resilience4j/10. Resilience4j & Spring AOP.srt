1
00:00:00,330 --> 00:00:03,030
Hello and welcome back.

2
00:00:03,570 --> 00:00:09,780
So here inside this matter, we are making the right call to address service and on this matter, we

3
00:00:09,780 --> 00:00:12,390
have used a circuit breaker annotation.

4
00:00:12,810 --> 00:00:17,720
Now this matter, we are calling from two places within the same class.

5
00:00:18,090 --> 00:00:21,390
So here are two different methods for creating the student.

6
00:00:21,390 --> 00:00:26,140
We are calling this and while getting the student by ID, we are calling this method.

7
00:00:26,460 --> 00:00:30,690
So two places we are calling this method within the same class.

8
00:00:31,850 --> 00:00:38,990
As I already said, resilience for the circuit breaker internally uses Spring EOP, so here as part

9
00:00:39,060 --> 00:00:41,560
spring, it will be concept, it will not work.

10
00:00:41,930 --> 00:00:42,320
Why?

11
00:00:42,650 --> 00:00:48,620
Because we are calling this matter within the same class so it will not able to create a proxy for this

12
00:00:48,620 --> 00:00:49,820
particular matter.

13
00:00:50,240 --> 00:00:51,980
This is the concept of spring.

14
00:00:51,990 --> 00:00:56,660
It will be it has nothing related to resilience for the circuit breaker.

15
00:00:56,990 --> 00:01:00,350
It's just that resilience for the internal uses.

16
00:01:00,350 --> 00:01:01,400
Spring it will be.

17
00:01:02,350 --> 00:01:07,420
So it's postponing it will be concept, if you are calling the matter within the same class, then it

18
00:01:07,420 --> 00:01:08,500
will not work.

19
00:01:08,830 --> 00:01:12,920
If you are of Arab Spring, it will be then you might be aware of this as well.

20
00:01:13,750 --> 00:01:15,370
So here we need to do one thing.

21
00:01:15,790 --> 00:01:19,270
Let's copy these two methods from here and.

22
00:01:20,280 --> 00:01:23,760
Let's create one new class, see?

23
00:01:24,810 --> 00:01:25,950
Common Service.

24
00:01:29,070 --> 00:01:31,710
Annotate with a service annotation.

25
00:01:34,660 --> 00:01:36,070
This two matters over here.

26
00:01:37,140 --> 00:01:46,470
And let me copy this faint line into common service like this, and these two matters will comment out

27
00:01:46,470 --> 00:01:47,150
or here.

28
00:01:47,940 --> 00:01:49,320
So let's comment out.

29
00:01:50,800 --> 00:01:58,030
Now, let me maximize this, let's all wear this in the student service, so here.

30
00:02:02,270 --> 00:02:03,850
Like this, Ottoway.

31
00:02:06,280 --> 00:02:14,080
Let's copy this Common Service, and here we will call Common Service to get addressed by idee.

32
00:02:15,270 --> 00:02:21,390
So now we are not calling this matter within the same class, because now this matter is inside a separate

33
00:02:21,390 --> 00:02:23,030
class that is common service.

34
00:02:23,700 --> 00:02:27,700
So here we have this circuit breaker in rotation and our fallback method.

35
00:02:28,140 --> 00:02:33,270
Now, let's say one Lowgar statement or case or Lowgar.

36
00:02:37,740 --> 00:02:39,030
Lowgar factory.

37
00:02:43,550 --> 00:02:44,420
Not get.

38
00:02:45,820 --> 00:02:47,020
Broider class name.

39
00:02:50,430 --> 00:02:50,920
That's it.

40
00:02:51,180 --> 00:02:57,800
Now, let's have one count variable, OK, this is to count how many times we are calling the aggressor.

41
00:02:58,040 --> 00:03:00,930
So say, for example, by default, the count is one.

42
00:03:01,710 --> 00:03:05,140
And using this logger, let's come to this method.

43
00:03:05,700 --> 00:03:13,140
So before calling the address service, let's log the count say count equal to.

44
00:03:14,570 --> 00:03:15,170
Count.

45
00:03:17,450 --> 00:03:18,240
Plus, plus.

46
00:03:19,560 --> 00:03:24,210
And here we lock this acceptance or using the longer.

47
00:03:26,210 --> 00:03:26,720
Ed.

48
00:03:28,220 --> 00:03:30,950
Ed, equal to this.

49
00:03:32,140 --> 00:03:32,770
Accepts a.

50
00:03:33,890 --> 00:03:39,410
So here we are logging how many times we are calling the address service so that we can take the state

51
00:03:39,410 --> 00:03:40,070
of the suite.

52
00:03:40,310 --> 00:03:44,430
So this is for testing purposes and here we are logging the exception.

53
00:03:44,660 --> 00:03:50,200
So this is also for our testing purposes that what exception we are getting while calling the address

54
00:03:50,300 --> 00:03:52,970
service or when the suite is open.

55
00:03:53,720 --> 00:03:59,240
So what we did is that we removed this piece of code for the circuit breaker because it will be will

56
00:03:59,240 --> 00:04:04,240
not work out here and is already said resilience for the internal uses.

57
00:04:04,250 --> 00:04:09,590
But it will be so we move to this piece of paper to another class that is Common Service.

58
00:04:09,860 --> 00:04:13,760
And we added a few loggers now from front service.

59
00:04:13,770 --> 00:04:16,940
We are calling this Common Service to get the address by.

60
00:04:17,900 --> 00:04:20,840
So this is what all we need in this lecture.

61
00:04:21,680 --> 00:04:26,300
If you want, you can do like this as it is and you can take it out as well.

62
00:04:26,330 --> 00:04:27,230
This will not work.

63
00:04:27,480 --> 00:04:31,010
OK, so this you can take on yourself if you want to take it out.

64
00:04:31,970 --> 00:04:38,240
So that's all we need to do for our resilience, for the circuit breaker now in the next lecture, we

65
00:04:38,240 --> 00:04:39,980
will test it out completely.

66
00:04:40,190 --> 00:04:47,080
That how circuit breaker works when it will go to open, stayed open and close states.

67
00:04:47,450 --> 00:04:50,280
So that's all we will see in the next lecture.

68
00:04:51,110 --> 00:04:52,700
So that's all for now.

69
00:04:53,090 --> 00:04:54,500
We'll see you in the next lecture.

70
00:04:54,980 --> 00:04:55,910
Thank you very much.
