1
00:00:00,360 --> 00:00:03,030
Hello and welcome back.

2
00:00:03,540 --> 00:00:09,690
So now we are all set with our faint light and spring cloud load balancer, so let's test it out.

3
00:00:10,500 --> 00:00:12,780
So first we will start the Eureka server.

4
00:00:13,740 --> 00:00:20,580
Now, let's start the student service and let's start the first instance of our adversaries on the board

5
00:00:20,580 --> 00:00:22,080
of eight zero eight two.

6
00:00:23,550 --> 00:00:30,450
Now, the second instance will start on the Port Ejiro entry, so let's again run the address service,

7
00:00:30,630 --> 00:00:33,180
so that will start on the port of entry.

8
00:00:33,460 --> 00:00:35,560
We can verify that on the Eureka server.

9
00:00:35,910 --> 00:00:37,590
So let's open the Eureka server.

10
00:00:38,640 --> 00:00:41,310
Still, we just have one instance of a delay to.

11
00:00:43,710 --> 00:00:44,460
Let's reload.

12
00:00:44,640 --> 00:00:46,620
Let's give a moment, yeah.

13
00:00:46,890 --> 00:00:49,630
Now we have two incidents what address service?

14
00:00:49,980 --> 00:00:55,440
The one is running on the port Ejiro and another one is running on the port of entry.

15
00:00:55,950 --> 00:01:01,320
And we have one instance for our student service that is running on the boat, eight zero eight zero.

16
00:01:02,600 --> 00:01:07,370
Now we have two instance for our address service, so how we will test it out.

17
00:01:07,790 --> 00:01:12,400
We are going to hit our student service, that is get student by ID.

18
00:01:12,590 --> 00:01:15,800
So internal student service is calling the address service.

19
00:01:15,980 --> 00:01:19,900
And in the address service, we have this long statement.

20
00:01:20,480 --> 00:01:26,690
So using this long statement, we can come to know that how many requests came to particular instance

21
00:01:26,690 --> 00:01:27,910
for the address service.

22
00:01:28,160 --> 00:01:30,710
So we will utilize this long statement.

23
00:01:32,310 --> 00:01:38,900
So let me maximize the logs, and this is one instance of that reservist.

24
00:01:38,940 --> 00:01:41,830
Let me clear the logs and this is another one.

25
00:01:42,390 --> 00:01:43,500
Let me clear the logs.

26
00:01:43,530 --> 00:01:44,900
Now, let's see.

27
00:01:46,290 --> 00:01:48,310
This is the first request to our service.

28
00:01:48,990 --> 00:01:51,870
This is second and the third one.

29
00:01:52,290 --> 00:01:58,350
So total three request to our student service and internally, three requests from student service to

30
00:01:58,350 --> 00:02:00,520
address service now in the logs.

31
00:02:00,540 --> 00:02:01,490
Let's check it out.

32
00:02:02,250 --> 00:02:07,480
So here for this instance, we can see that one request came for this particular instance of better

33
00:02:07,540 --> 00:02:07,980
service.

34
00:02:08,550 --> 00:02:14,490
And for this one, let's see, talking, OK, two plus one, three total.

35
00:02:14,970 --> 00:02:20,900
Now, let's hit the fourth request over student service and let's see where it goes.

36
00:02:21,060 --> 00:02:23,070
Here we have two it remains in.

37
00:02:24,170 --> 00:02:31,370
And in this one, you see from one now we can see that the fourth request came to this particular instance,

38
00:02:32,240 --> 00:02:38,480
so we hit a portal for request and internally for requests from student service to address service.

39
00:02:38,780 --> 00:02:45,160
So to request came to this particular instance and to request went to this particular instance.

40
00:02:45,470 --> 00:02:51,380
So it got loaded across all the instances we have for address service.

41
00:02:52,600 --> 00:02:59,170
So this is all done with the help of Eureka server, open phone line and sprint cloud load balancer,

42
00:02:59,170 --> 00:03:06,820
because by this registry student service will identify that there are two instances of address service

43
00:03:07,030 --> 00:03:10,520
and we have already done the configuration in our student service.

44
00:03:10,540 --> 00:03:11,510
Let's go over there.

45
00:03:12,100 --> 00:03:18,600
This is the front line and this is our configuration that load balance TUFFIN client for the address

46
00:03:18,610 --> 00:03:19,150
service.

47
00:03:20,770 --> 00:03:26,740
So here we have done the load balancing using the sprint cloud load balancer, but we took the advantage

48
00:03:26,740 --> 00:03:32,080
of Eureka server and faint light and that's the beauty of spring cloud.

49
00:03:33,790 --> 00:03:40,510
So this is how you can achieve clydeside load balancing for your micro services using sprint cloud load

50
00:03:40,510 --> 00:03:46,030
balancer, so that's all for now, will proceed further in the next lecture.

51
00:03:46,570 --> 00:03:47,560
Thank you very much.
