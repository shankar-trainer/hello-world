1
00:00:00,610 --> 00:00:03,190
Hello and welcome back.

2
00:00:03,760 --> 00:00:09,820
Before we jump to micro services, let's first understand what is monolithic application.

3
00:00:10,960 --> 00:00:17,260
Maybe you are aware of monolithic application or it may be possible that you are working on the application,

4
00:00:17,260 --> 00:00:21,970
which is monolithic, but you don't know that this is called a monolithic.

5
00:00:23,400 --> 00:00:28,290
Now, here to understand this, let's take the example of a university application.

6
00:00:29,270 --> 00:00:33,090
So in this application, we can have different components, like for the university.

7
00:00:33,290 --> 00:00:39,890
We have students and certain details like address or the subjects that the student is learning and the

8
00:00:39,890 --> 00:00:47,270
how different faculties in the university like commerce, arts, engineering, medical, pharmacy and

9
00:00:47,270 --> 00:00:47,900
many more.

10
00:00:49,380 --> 00:00:55,800
For the university, we have professors and we also have non-academic staff as well with doing office

11
00:00:55,800 --> 00:01:03,450
work and for the university we have online examination portal by which university is taking the online

12
00:01:03,450 --> 00:01:04,140
examination.

13
00:01:04,470 --> 00:01:11,250
And we have one result component by which university is providing results to the students across all

14
00:01:11,250 --> 00:01:12,030
the faculties.

15
00:01:13,390 --> 00:01:19,240
There are more components also possible like liability and any other, but here, let's concentrate

16
00:01:19,240 --> 00:01:22,360
on these six components for this particular example.

17
00:01:23,440 --> 00:01:29,590
So this all six components or whatever, you have twenty or twenty five, if you have all these components

18
00:01:29,590 --> 00:01:33,990
in the single application, then it is called this monolithic application.

19
00:01:34,810 --> 00:01:38,110
So all the components in a single spring would application.

20
00:01:38,140 --> 00:01:40,960
You can say that it is monolithic application.

21
00:01:41,200 --> 00:01:42,570
Now, this is gender term.

22
00:01:42,970 --> 00:01:48,910
So here I am taking example of Springwood because this course is all about micro services with springboard

23
00:01:48,910 --> 00:01:49,720
and spinning cloud.

24
00:01:49,720 --> 00:01:55,720
But this is applicable to any of the programming languages and any of the web frameworks that you are

25
00:01:55,720 --> 00:01:56,140
using.

26
00:01:57,630 --> 00:02:01,350
Now, let's talk about the drawbacks of the monolithic application.

27
00:02:02,390 --> 00:02:09,260
The first is called complexity, as you have just one single application, you will have a lot of packages,

28
00:02:09,260 --> 00:02:12,110
controllers and entity classes inside that.

29
00:02:13,010 --> 00:02:18,710
So as a developer, it will be very hard to go through all the thousands lines of code and different

30
00:02:18,710 --> 00:02:19,330
packages.

31
00:02:19,730 --> 00:02:24,380
And another thing is, say, for example, you have a slight change in one component.

32
00:02:24,560 --> 00:02:26,480
For example, in result component.

33
00:02:26,690 --> 00:02:33,440
Then you need to test complete application because you have all the components in just one Springwood

34
00:02:33,440 --> 00:02:33,980
application.

35
00:02:34,160 --> 00:02:35,990
Now, here we just have six.

36
00:02:36,350 --> 00:02:43,070
But when you have actual application in hand, you might be having 20, 50 or 100 components within

37
00:02:43,070 --> 00:02:44,650
the same Springwood application.

38
00:02:45,500 --> 00:02:49,010
So as a developer, it is very hard to understand the business logic.

39
00:02:50,140 --> 00:02:53,660
The next is tight coupling between the different components.

40
00:02:54,080 --> 00:03:00,130
So, for example, if your application is down, then none of your components will be accessible by

41
00:03:00,130 --> 00:03:00,950
the end user.

42
00:03:01,210 --> 00:03:05,170
So, for example, your application is down, then student registration is going on.

43
00:03:05,180 --> 00:03:11,410
That will be also down if some faculty work is going on, on the examination portal or result, that

44
00:03:11,410 --> 00:03:16,270
will not be accessible because you have all the things in just one application.

45
00:03:16,390 --> 00:03:20,090
You cannot access other components while your application is down.

46
00:03:20,740 --> 00:03:23,860
So that is tight coupling between your components.

47
00:03:25,040 --> 00:03:26,630
The authorities scalability.

48
00:03:27,080 --> 00:03:33,530
So when the academic year starts, right, you have usurers, for example, huge traffic for the student

49
00:03:33,530 --> 00:03:39,080
registration and your examination and research portal doesn't have that much traffic at that time.

50
00:03:39,920 --> 00:03:42,780
So obviously, you need to increase the competition power.

51
00:03:42,800 --> 00:03:47,270
Basically, you need to upgrade the server or you need to scale your application.

52
00:03:47,300 --> 00:03:52,670
You need to have more instances for your Springwood application to handle that traffic for the student

53
00:03:52,670 --> 00:03:53,340
registration.

54
00:03:54,170 --> 00:03:59,990
So increasing the competition power or increasing the number of instances is basically cost.

55
00:04:00,320 --> 00:04:01,750
You are going to pay for that.

56
00:04:02,000 --> 00:04:05,780
Now, the same happens when you have examinees and for the university, right?

57
00:04:06,020 --> 00:04:09,470
Lot of students are giving the examinees and at the same time.

58
00:04:09,650 --> 00:04:14,840
So your server need to handle that much traffic, otherwise it will be trouble for you.

59
00:04:15,440 --> 00:04:20,330
Now, at the time, your registration portal and reserve portal doesn't have that much traffic.

60
00:04:21,160 --> 00:04:27,820
Same applies when universities giving out the results, your citizen portal and examination portal doesn't

61
00:04:27,820 --> 00:04:33,850
have that much topic, just the result portal is having huge traffic because all the students are taking

62
00:04:33,850 --> 00:04:36,100
the results online on your portal.

63
00:04:37,380 --> 00:04:44,430
So what happens at a time one or four or five components are having huge topic and another 20 50 components

64
00:04:44,430 --> 00:04:49,160
doesn't have that much topic, but still you need to scale up all the components.

65
00:04:49,170 --> 00:04:49,500
Why?

66
00:04:49,860 --> 00:04:53,620
Because you have all the components within the same spring board application.

67
00:04:53,850 --> 00:04:58,910
You don't have luxury to just kill one particular component and not others.

68
00:05:00,080 --> 00:05:06,750
Say you have 20 components in your monolithic application, but just one component is having you topic,

69
00:05:06,980 --> 00:05:09,490
then us getting the complete application.

70
00:05:09,510 --> 00:05:16,010
So other 19 components, you don't require much competition, but still you are scaling up your application.

71
00:05:16,400 --> 00:05:19,400
And that's the drawback with monolithic application.

72
00:05:20,690 --> 00:05:25,790
So this is the monolithic application and these are the drawbacks with the monolithic application.

73
00:05:26,880 --> 00:05:32,610
Now, in the next lecture, we will see what is microcircuits and how it is resolving these drawbacks

74
00:05:32,610 --> 00:05:34,410
of the monolithic application.

75
00:05:35,100 --> 00:05:39,480
So that's all for now, will proceed further in the next lecture.

76
00:05:40,080 --> 00:05:40,950
Thank you very much.
