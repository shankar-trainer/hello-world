1
00:00:00,530 --> 00:00:03,260
Hello and welcome back.

2
00:00:03,740 --> 00:00:09,680
So now we are all set with our conflicts server over, and in this lecture we will make the changes

3
00:00:09,680 --> 00:00:16,730
in our adversaries so that it can lead to properties using conflicts over whatever properties we have

4
00:00:16,760 --> 00:00:17,720
in our local guide.

5
00:00:18,140 --> 00:00:20,650
These are the properties, right, to sell the properties.

6
00:00:20,660 --> 00:00:23,320
We have a database bought and other things.

7
00:00:23,810 --> 00:00:27,750
So this we are going to read in our address service using that config server.

8
00:00:28,610 --> 00:00:30,830
So there are a couple of dependencies we need to add.

9
00:00:31,100 --> 00:00:37,650
And the first is sprinklered config client and the second is sprinklered starter bootstrap.

10
00:00:37,940 --> 00:00:39,770
So these are the two dependencies.

11
00:00:39,770 --> 00:00:43,270
We need to add in each of the micro services here.

12
00:00:43,580 --> 00:00:45,960
We are taking that service as an example.

13
00:00:46,490 --> 00:00:48,500
So I'm just adding into the service.

14
00:00:48,830 --> 00:00:52,970
But make sure you are adding all these things in your all micro services.

15
00:00:53,450 --> 00:00:57,530
So these two dependencies we are adding into the bombed out XML better service.

16
00:00:57,760 --> 00:01:01,650
Now let's open the application properties for our address service.

17
00:01:02,450 --> 00:01:08,510
Now here we need to define Capullo properties so that it can fetch the properties using config server.

18
00:01:08,810 --> 00:01:13,930
Now we know that we are using the Utica in our country server application.

19
00:01:14,330 --> 00:01:18,490
So basically config server has registered with the Eureka server.

20
00:01:18,950 --> 00:01:23,780
So we need to define in the service that look for the config Savarin Eureka.

21
00:01:24,110 --> 00:01:31,580
That is our service discovery so that we need to do using the spring cloud dart config.

22
00:01:32,870 --> 00:01:35,850
That discovery enabled equal to true.

23
00:01:36,740 --> 00:01:42,920
So this is done property, we need to set that look for the convicts that were using the service discovery

24
00:01:42,920 --> 00:01:44,130
in our case, Eureka.

25
00:01:45,050 --> 00:01:50,280
Now, the next thing we need to do is we need to provide the application name of other conflicts are

26
00:01:50,280 --> 00:01:54,170
over so that we need to do using the spring cloud.

27
00:01:55,340 --> 00:02:02,310
Config tarde, discovery service ID, so that is config server.

28
00:02:03,080 --> 00:02:07,290
This is what you provided as application name in your config server.

29
00:02:07,850 --> 00:02:11,320
So this is the application, not properties for our config server.

30
00:02:11,810 --> 00:02:19,100
So whatever you pointed or here is something that you need to provide us service ID or you can say service

31
00:02:19,100 --> 00:02:21,140
name or application name, whatever.

32
00:02:21,770 --> 00:02:28,370
Now using these properties, we are looking into the Eureka server and finding the configuration and

33
00:02:28,370 --> 00:02:32,540
address service will use this config server to pass the required properties.

34
00:02:34,210 --> 00:02:39,700
Now, say you are not using UDCA in your config server, then you need to provide that you are all of

35
00:02:39,700 --> 00:02:40,580
your config server.

36
00:02:41,050 --> 00:02:46,710
So for that, you need to provide property, asprin, cloud, config, dard.

37
00:02:46,720 --> 00:02:51,160
You are right and provide you are all of your config server.

38
00:02:51,520 --> 00:02:59,590
So localhost colonnaded edit because our config server is running in our local machine on board eight

39
00:02:59,590 --> 00:03:00,400
eight eight eight.

40
00:03:01,790 --> 00:03:07,340
So if you are using the service discovery in your config server, like we use the Utica, then you need

41
00:03:07,340 --> 00:03:12,740
to set these two properties and if you are not using Eureka in your conflicts work, then directly you

42
00:03:12,740 --> 00:03:15,020
need to provide the are of your config server.

43
00:03:15,410 --> 00:03:18,000
So here we are using the Utica in the conflict.

44
00:03:18,740 --> 00:03:24,440
So this property I'm just commenting out for your reference, if you want to go by this way and don't

45
00:03:24,440 --> 00:03:28,350
want to use the Utica in config server, then you need to set this property.

46
00:03:28,520 --> 00:03:29,810
So this is for your reference.

47
00:03:30,930 --> 00:03:36,930
Now we want to read these properties from our local get people using the convicts are the last thing

48
00:03:36,930 --> 00:03:43,410
we need to do for that is we need to rename this application that properties as bootstrap properties.

49
00:03:44,190 --> 00:03:46,830
If you are not renaming this, then it will not work.

50
00:03:47,190 --> 00:03:54,420
So to work with convicts are what you need to rename your application that properties as bootstrap properties.

51
00:03:54,690 --> 00:04:00,260
And you need to define these two properties that you are enabling service discovery for config server

52
00:04:00,540 --> 00:04:04,500
and you are looking for the conflict server using this service idea.

53
00:04:04,510 --> 00:04:07,790
Or you can say service name or you can say application name.

54
00:04:08,370 --> 00:04:13,100
So now we are all set with our config server and address microcircuits.

55
00:04:13,530 --> 00:04:15,170
So let's test it out quickly.

56
00:04:15,690 --> 00:04:22,680
So first we will start with Unica server as usual, and then we will start the conflict server and we

57
00:04:22,680 --> 00:04:24,240
don't need a big win for now.

58
00:04:24,240 --> 00:04:24,690
Live it.

59
00:04:24,990 --> 00:04:26,150
Let's talk directly.

60
00:04:26,150 --> 00:04:26,910
Address service.

61
00:04:27,600 --> 00:04:35,400
We might see some errors or exception for the Zipkin or maybe I get it, but we will ignore those for

62
00:04:35,400 --> 00:04:35,670
now.

63
00:04:36,300 --> 00:04:39,780
For the time being, we are directly going to to address service.

64
00:04:41,140 --> 00:04:46,690
Wait for it, yeah, see, it is establishing the database connection that means it is reading these

65
00:04:46,690 --> 00:04:53,890
properties, otherwise we should have seen the errors in this start up, only we haven't got anything.

66
00:04:54,820 --> 00:04:57,550
See, it started on the board, a zero eight three.

67
00:04:57,550 --> 00:05:00,130
And here we haven't provided the board.

68
00:05:00,400 --> 00:05:03,730
And here it's reading Ejiro entry.

69
00:05:04,180 --> 00:05:06,490
So let's go to Posman.

70
00:05:06,520 --> 00:05:07,780
And here.

71
00:05:09,100 --> 00:05:19,090
Let's directly hit the address service, localhost it 083 Slash Epper.

72
00:05:20,820 --> 00:05:25,530
Let's address let's get Bidi, I'd call to one.

73
00:05:27,900 --> 00:05:29,530
We got the success response.

74
00:05:30,060 --> 00:05:37,110
This is only possible if our service is reading these properties, whatever we have in our report.

75
00:05:37,320 --> 00:05:43,890
Local people basically using the conflicts are what if our service is not adding those properties using

76
00:05:43,890 --> 00:05:47,230
the conflict server, then this response is not possible.

77
00:05:47,970 --> 00:05:52,650
So this is how you can use conflict server in your micro services.

78
00:05:52,950 --> 00:05:57,420
And this is the two properties that you need to set in each of your micro services.

79
00:05:57,790 --> 00:06:02,060
And these two dependencies you need to add one sprinklered conflict line.

80
00:06:02,490 --> 00:06:05,190
And the second is bring cloud startup bootstrap.

81
00:06:06,740 --> 00:06:13,650
So this is how you can use sprinklered config server in your micro services, so that's all for now.

82
00:06:14,000 --> 00:06:15,530
We'll see you in the next lecture.

83
00:06:16,100 --> 00:06:17,000
Thank you very much.
